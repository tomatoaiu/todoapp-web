{"version":3,"sources":["reducers/taskReducer.ts","contexts/TaskContext.ts","TodayViewer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["omitDeep","require","reducer","state","action","taskid","v1","type","Object","objectSpread","defineProperty","concat","deadline","done","text","s","assign","Error","initialState","id1","Date","id2","id3","dispatch","payload","TaskContext","React","createContext","useStyles","makeStyles","theme","createStyles","root","width","maxWidth","backgroundColor","palette","background","paper","formControl","margin","spacing","minWidth","form","display","flexDirection","formControlLabel","marginTop","TodayViewer","classes","_useState","useState","_useState2","slicedToArray","checked","setChecked","_useContext","useContext","_React$useState","_React$useState2","showItems","setShowItems","_React$useState3","_React$useState4","taskId","setTaskId","alltasks","useMemo","entries","donetasks","filter","_ref","_ref2","notdonetasks","_ref3","_ref4","handleToggle","value","key","currentIndex","indexOf","newChecked","toConsumableArray","push","splice","console","log","_React$useState5","_React$useState6","open","setOpen","_React$useState7","_React$useState8","openDeleteModal","setOpenDeleteModal","_useState3","_useState4","input","setInput","handleClose","Item","index","react_default","a","createElement","ListItem","role","undefined","dense","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","onClick","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","handleClickOpen","Edit_default","handleDeleteOpen","Delete_default","Button","variant","color","className","autoComplete","FormControl","InputLabel","htmlFor","Select","onChange","e","target","MenuItem","List","map","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","Dialog","fullWidth","onClose","aria-labelledby","DialogTitle","id","DialogContent","TextField","label","placeholder","InputLabelProps","shrink","DialogActions","Typography","gutterBottom","App","useTheme","tasks","localStorage","JSON","parse","getItem","_React$useReducer","useReducer","_React$useReducer2","taskProps","useEffect","setItem","stringify","CssBaseline","AppBar","position","clsx","appBar","appBarShift","Toolbar","menuButton","hide","Menu_default","noWrap","Drawer","drawer","anchor","drawerPaper","drawerHeader","direction","ChevronLeft_default","ChevronRight_default","Divider","button","MoveToInbox_default","Mail_default","content","contentShift","Provider","src_TodayViewer","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","easeOut","enteringScreen","marginRight","flexShrink","alignItems","padding","mixins","toolbar","justifyContent","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oZAGMA,EAAWC,EAAQ,KAElB,SAASC,EAAQC,EAAkBC,GACxC,IAAMC,EAAS,WAAYD,EAASA,EAAOC,OAASC,eACpD,OAAQF,EAAOG,MACb,IAAK,SACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFL,EADLK,OAAAE,EAAA,EAAAF,CAAA,MAAAG,OAEMN,GAAW,CACbO,SAAUR,EAAOQ,SACjBC,MAAM,EACNC,KAAM,MAGZ,IAAK,SACH,IAAMC,EAAIP,OAAOQ,OAAO,GAAIb,GAC5B,OAAOH,EAASe,EAAG,IAAAJ,OAAIN,KAEzB,IAAK,SACH,OAAOG,OAAAC,EAAA,EAAAD,CAAA,GACFL,EADLK,OAAAE,EAAA,EAAAF,CAAA,MAAAG,OAEMN,GAAW,CACbO,SAAUR,EAAOQ,SACjBC,KAAMT,EAAOS,KACbC,KAAMV,EAAOU,QAGnB,QACE,MAAM,IAAIG,2KC5BVC,GAA0B,CAC9Bf,MAAO,CACLgB,IAAO,CACLP,SAAU,IAAIQ,KACdP,MAAM,EACNC,KAAM,SAERO,IAAO,CACLT,SAAU,IAAIQ,KACdP,MAAM,EACNC,KAAM,SAERQ,IAAO,CACLV,SAAU,IAAIQ,KACdP,MAAM,EACNC,KAAM,UAGVS,SAAU,SAACC,MAGAC,GAAcC,IAAMC,cAAyBT,ICMpDU,GAAYC,YAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,MAAO,OACPC,SAAU,IACVC,gBAAiBL,EAAMM,QAAQC,WAAWC,OAE5CC,YAAa,CACXC,OAAQV,EAAMW,QAAQ,GACtBC,SAAU,KAEZC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfL,OAAQ,OACRP,MAAO,eAETa,iBAAkB,CAChBC,UAAWjB,EAAMW,QAAQ,QA0MhBO,OArMf,WACE,IAAMC,EAAUrB,KADKsB,EAESC,mBAAS,CAAC,IAFnBC,EAAA5C,OAAA6C,EAAA,EAAA7C,CAAA0C,EAAA,GAEdI,EAFcF,EAAA,GAELG,EAFKH,EAAA,GAAAI,EAGkBC,qBAAWhC,IAA1CtB,EAHaqD,EAGbrD,MAAOoB,EAHMiC,EAGNjC,SAHMmC,EAIahC,IAAMyB,SAAS,OAJ5BQ,EAAAnD,OAAA6C,EAAA,EAAA7C,CAAAkD,EAAA,GAIdE,EAJcD,EAAA,GAIHE,EAJGF,EAAA,GAAAG,EAKOpC,IAAMyB,SAAS,IALtBY,EAAAvD,OAAA6C,EAAA,EAAA7C,CAAAsD,EAAA,GAKdE,EALcD,EAAA,GAKNE,EALMF,EAAA,GAOfG,EAAWC,kBAAQ,WACvB,OAAO3D,OAAO4D,QAAQjE,IACrB,CAACA,IAEEkE,EAAYF,kBAAQ,WACxB,OAAO3D,OAAO4D,QAAQjE,GAAOmE,OAAO,SAAAC,GAAA,IAAAC,EAAAhE,OAAA6C,EAAA,EAAA7C,CAAA+D,EAAA,UAAAC,EAAA,GAAAA,EAAA,GAAwB3D,QAC3D,CAACV,IAEEsE,EAAeN,kBAAQ,WAC3B,OAAO3D,OAAO4D,QAAQjE,GAAOmE,OAAO,SAAAI,GAAA,IAAAC,EAAAnE,OAAA6C,EAAA,EAAA7C,CAAAkE,EAAA,UAAAC,EAAA,IAAAA,EAAA,GAAyB9D,QAC5D,CAACV,IAEEyE,EAAe,SAACC,EAAeC,GAAhB,OAAgC,WACnD,IAAMC,EAAezB,EAAQ0B,QAAQH,GAC/BI,EAAUzE,OAAA0E,EAAA,EAAA1E,CAAO8C,IAED,IAAlByB,EACFE,EAAWE,KAAKN,GAEhBI,EAAWG,OAAOL,EAAc,GAElCM,QAAQC,IAAInF,EAAO2E,GAEnBvD,EAAS,CACPhB,KAAM,SACNF,OAAQyE,EACRjE,MAAOV,EAAM2E,GAAKjE,KAClBD,SAAUT,EAAM2E,GAAKlE,SACrBE,KAAMX,EAAM2E,GAAKhE,OAGnByC,EAAW0B,GACXhB,EAAUa,KAvCSS,EA0CG7D,IAAMyB,UAAS,GA1ClBqC,EAAAhF,OAAA6C,EAAA,EAAA7C,CAAA+E,EAAA,GA0CdE,EA1CcD,EAAA,GA0CRE,EA1CQF,EAAA,GAAAG,EA2CyBjE,IAAMyB,UAAS,GA3CxCyC,EAAApF,OAAA6C,EAAA,EAAA7C,CAAAmF,EAAA,GA2CdE,EA3CcD,EAAA,GA2CGE,EA3CHF,EAAA,GAAAG,EA4CK5C,mBAAS,IA5Cd6C,EAAAxF,OAAA6C,EAAA,EAAA7C,CAAAuF,EAAA,GA4CdE,EA5CcD,EAAA,GA4CPE,GA5COF,EAAA,GAiErB,SAASG,KACPT,GAAQ,GAaV,SAASU,GAAKtB,EAAaD,EAAawB,GACtC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAU3B,IAAKA,EAAK4B,UAAMC,EAAWC,OAAK,GACxCN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEC,KAAK,QACLzD,QAASuB,EAAMhE,KACfmG,UAAW,EACXC,eAAa,EACbC,QAAStC,EAAayB,EAAOvB,MAGjCwB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAcC,QAAO,GAAAzG,OAAKkE,EAAM/D,QAChCwF,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAYP,KAAK,MAAMQ,aAAW,OAAOL,QAAS,kBA/C1D,SAAyBpC,GACvBb,EAAUa,GACVY,GAAQ,GA6CsD8B,CAAgB1C,KACtEwB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,OAEFD,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAYP,KAAK,MAAMQ,aAAW,OAAOL,QAAS,kBA9C1D,SAA0BpC,GACxBb,EAAUa,GACVgB,GAAmB,GA4C2C4B,CAAiB5C,KACvEwB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,SAOV,OA3BAlB,QAAQC,IAAInF,GA4BVmG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAASC,QAAQ,WAAWC,MAAM,UAAUZ,QAAS,kBAAM3F,EAAS,CAClEhB,KAAM,SACNK,SAAU,IAAIQ,SAFhB,gCAKAkF,EAAAC,EAAAC,cAAA,QAAMuB,UAAW9E,EAAQjB,KAAMgG,aAAa,OAC1C1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAaF,UAAW9E,EAAQV,aAC9B+D,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAYC,QAAQ,cAApB,4BACA7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CACEvD,MAAOjB,EACPyE,SAAU,SAACC,GAAD,OAAOzE,EAAY,GAAAlD,OAAI2H,EAAEC,OAAO1D,UAE1CyB,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAU3D,MAAO,OAAjB,4CACAyB,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAU3D,MAAO,QAAjB,kDACAyB,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAU3D,MAAO,WAAjB,qDAKNyB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMV,UAAW9E,EAAQjB,MACP,QAAd4B,EACEM,EAASwE,IAAI,SAAAC,EAAetC,GAAf,IAAAuC,EAAApI,OAAA6C,EAAA,EAAA7C,CAAAmI,EAAA,UACXvC,GADWwC,EAAA,GAAAA,EAAA,GACMvC,KAEL,SAAdzC,EACES,EAAUqE,IAAI,SAAAG,EAAexC,GAAf,IAAAyC,EAAAtI,OAAA6C,EAAA,EAAA7C,CAAAqI,EAAA,UACZzC,GADY0C,EAAA,GAAAA,EAAA,GACKzC,KAEnB5B,EAAaiE,IAAI,SAAAK,EAAe1C,GAAf,IAAA2C,EAAAxI,OAAA6C,EAAA,EAAA7C,CAAAuI,EAAA,UACf3C,GADe4C,EAAA,GAAAA,EAAA,GACE3C,MAK3BC,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACEC,WAAW,EACXhH,SAAU,KACVuD,KAAMA,EACN0D,QAAShD,GACTiD,kBAAgB,0BAEhB9C,EAAAC,EAAAC,cAAC6C,GAAA,EAAD,CAAaC,GAAG,0BAAhB,oBACAhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACEjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACEF,GAAG,sBACHG,MAAM,aACNC,YAAY,aACZR,WAAS,EACT1G,OAAO,SACPmH,gBAAiB,CACfC,QAAQ,GAEVvB,SAAU,SAAAC,GAAC,OAAIpC,GAASoC,EAAEC,OAAO1D,WAGrCyB,EAAAC,EAAAC,cAACqD,EAAA,EAAD,KACEvD,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQV,QAASf,GAAa2B,MAAM,WAApC,4BAGAxB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQV,QA/GhB,WACE7B,QAAQC,IAAItB,GACZzC,EAAS,CACPhB,KAAM,SACNF,OAAQ2D,EACRnD,KAAMV,EAAM6D,GAAQnD,KACpBD,SAAUT,EAAM6D,GAAQpD,SACxBE,KAAMmF,IAERP,GAAQ,IAsG8BoC,MAAM,WAAtC,kBAMJxB,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACEC,WAAW,EACXhH,SAAU,KACVuD,KAAMI,EACNsD,QAAShD,GACTiD,kBAAgB,0BAEhB9C,EAAAC,EAAAC,cAAC6C,GAAA,EAAD,CAAaC,GAAG,0BAAhB,0BACAhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACEjD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAYjC,QAAQ,YAAYkC,cAAY,GAA5C,2EAIFzD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,KACEvD,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQV,QAAS,kBAAMpB,GAAmB,IAAQgC,MAAM,WAAxD,4BAGAxB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQV,QAvHhB,WACE7B,QAAQC,IAAItB,GACZzC,EAAS,CACPhB,KAAM,SACNF,OAAQ2D,IAEV8B,GAAmB,IAiHkBgC,MAAM,WAArC,gCCzHKkC,OA9Ff,WACE,IAAM/G,EAAUrB,KACVE,EAAQmI,cAFDvG,EAGWhC,IAAMyB,UAAS,GAH1BQ,EAAAnD,OAAA6C,EAAA,EAAA7C,CAAAkD,EAAA,GAGN+B,EAHM9B,EAAA,GAGA+B,EAHA/B,EAAA,GAIPuG,EAAQ,UAAWC,aAAeC,KAAKC,MAAL,GAAA1J,OAAcwJ,aAAaG,QAAQ,WAAc,GAJ5EC,EAKa7I,IAAM8I,WAAWtK,EAASgK,GALvCO,EAAAjK,OAAA6C,EAAA,EAAA7C,CAAA+J,EAAA,GAKNpK,EALMsK,EAAA,GAKClJ,EALDkJ,EAAA,GAMPC,EAAuB,CAAEvK,QAAOoB,YAiBtC,OAfAoJ,oBAAU,WACRR,aAAaS,QAAQ,QAASR,KAAKS,UAAU1K,KAC5C,CAACA,IAcFmG,EAAAC,EAAAC,cAAA,OAAKuB,UAAW9E,EAAQjB,MACtBsE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,MACAxE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CACEC,SAAS,QACTjD,UAAWkD,YAAKhI,EAAQiI,OAAT1K,OAAAE,EAAA,EAAAF,CAAA,GACZyC,EAAQkI,YAAc1F,KAGzBa,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,KACE9E,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEQ,MAAM,UACNP,aAAW,cACXL,QAxBV,WACExB,GAAQ,IAwBAqB,KAAK,QACLgB,UAAWkD,YAAKhI,EAAQoI,WAAY5F,GAAQxC,EAAQqI,OAEpDhF,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,OAEFD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAYjC,QAAQ,KAAK2D,QAAM,GAA/B,cAKJlF,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CACE1D,UAAW9E,EAAQyI,OACnB7D,QAAQ,aACR8D,OAAO,OACPlG,KAAMA,EACNxC,QAAS,CACPX,MAAOW,EAAQ2I,cAGjBtF,EAAAC,EAAAC,cAAA,OAAKuB,UAAW9E,EAAQ4I,cACtBvF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAYJ,QAzCpB,WACExB,GAAQ,KAyCqB,QAApB5D,EAAMgK,UAAsBxF,EAAAC,EAAAC,cAACuF,EAAAxF,EAAD,MAAsBD,EAAAC,EAAAC,cAACwF,EAAAzF,EAAD,QAGvDD,EAAAC,EAAAC,cAACyF,EAAA,EAAD,MACA3F,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KAzCY,CAAC,SA0CAC,IAAI,SAAC5H,EAAMuF,GAAP,OACbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUyF,QAAM,EAACpH,IAAKhE,GACpBwF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KAAeR,EAAQ,IAAM,EAAIC,EAAAC,EAAAC,cAAC2F,EAAA5F,EAAD,MAAgBD,EAAAC,EAAAC,cAAC4F,EAAA7F,EAAD,OACjDD,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAcC,QAAStG,SAc/BwF,EAAAC,EAAAC,cAAA,QACEuB,UAAWkD,YAAKhI,EAAQoJ,QAAT7L,OAAAE,EAAA,EAAAF,CAAA,GACZyC,EAAQqJ,aAAe7G,KAG1Ba,EAAAC,EAAAC,cAAA,OAAKuB,UAAW9E,EAAQ4I,eACxBvF,EAAAC,EAAAC,cAAC/E,GAAY8K,SAAb,CAAsB1H,MAAO6F,GAC3BpE,EAAAC,EAAAC,cAACgG,GAAD,UAWJ5K,GAAYC,YAAW,SAACC,GAAD,MAAmB,CAC9CE,KAAM,CACJY,QAAS,QAEXsI,OAAQ,CACNuB,WAAY3K,EAAM4K,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQ9K,EAAM4K,YAAYE,OAAOC,MACjCC,SAAUhL,EAAM4K,YAAYI,SAASC,iBAGzC5B,YAAa,CACXlJ,MAAK,eAAAtB,OAbW,IAaX,OACLqM,WAdgB,IAehBP,WAAY3K,EAAM4K,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQ9K,EAAM4K,YAAYE,OAAOK,QACjCH,SAAUhL,EAAM4K,YAAYI,SAASI,kBAGzC7B,WAAY,CACV8B,YAAarL,EAAMW,QAAQ,IAE7B6I,KAAM,CACJ1I,QAAS,QAEX8I,OAAQ,CACNzJ,MA3BgB,IA4BhBmL,WAAY,GAEdxB,YAAa,CACX3J,MA/BgB,KAiClB4J,aAAarL,OAAAC,EAAA,EAAAD,CAAA,CACXoC,QAAS,OACTyK,WAAY,SACZC,QAAS,SACNxL,EAAMyL,OAAOC,QAJN,CAKVC,eAAgB,aAElBpB,QAAS,CACPqB,SAAU,EACVJ,QAASxL,EAAMW,QAAQ,GACvBgK,WAAY3K,EAAM4K,YAAYC,OAAO,SAAU,CAC7CC,OAAQ9K,EAAM4K,YAAYE,OAAOC,MACjCC,SAAUhL,EAAM4K,YAAYI,SAASC,gBAEvCC,YA/CgB,KAiDlBV,aAAc,CACZG,WAAY3K,EAAM4K,YAAYC,OAAO,SAAU,CAC7CC,OAAQ9K,EAAM4K,YAAYE,OAAOK,QACjCH,SAAUhL,EAAM4K,YAAYI,SAASI,iBAEvCF,WAAY,MCpKIW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3H,EAAAC,EAAAC,cAAC0H,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf138748.chunk.js","sourcesContent":["import { v1 } from 'uuid';\nimport { StateType, ActionType } from '../models/taskModels';\n\nconst omitDeep = require('omit-deep');\n\nexport function reducer(state: StateType, action: ActionType) {\n  const taskid = 'taskid' in action ? action.taskid : v1();\n  switch (action.type) {\n    case 'create':\n      return {\n        ...state,\n        [`${taskid}`]: {\n          deadline: action.deadline,\n          done: false,\n          text: ''\n        }\n      };\n    case 'delete': {\n      const s = Object.assign({}, state);\n      return omitDeep(s, [`${taskid}`]);\n    }\n    case 'update':\n      return {\n        ...state,\n        [`${taskid}`]: {\n          deadline: action.deadline,\n          done: action.done,\n          text: action.text\n        }\n      };\n    default:\n      throw new Error();\n  }\n}\n","import React from 'react';\nimport { TaskProps, ActionType } from '../models/taskModels';\n\nconst initialState: TaskProps = {\n  state: {\n    'id1': {\n      deadline: new Date(),\n      done: false,\n      text: 'text1',\n    },\n    'id2': {\n      deadline: new Date(),\n      done: false,\n      text: 'text2',\n    },\n    'id3': {\n      deadline: new Date(),\n      done: false,\n      text: 'text3',\n    },\n  },\n  dispatch: (payload: ActionType) => void {}\n};\n\nexport const TaskContext = React.createContext<TaskProps>(initialState);\n","import React, { useState, useContext, useMemo } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { TaskContext } from './contexts/TaskContext';\nimport { TaskProps, Task } from './models/taskModels';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    form: {\n      display: 'flex',\n      flexDirection: 'column',\n      margin: 'auto',\n      width: 'fit-content',\n    },\n    formControlLabel: {\n      marginTop: theme.spacing(1),\n    },\n  })\n);\n\nfunction TodayViewer() {\n  const classes = useStyles();\n  const [checked, setChecked] = useState([0]);\n  const { state, dispatch }: TaskProps = useContext(TaskContext);\n  const [showItems, setShowItems] = React.useState('all');\n  const [taskId, setTaskId] = React.useState('');\n\n  const alltasks = useMemo(() => {\n    return Object.entries(state);\n  }, [state]);\n\n  const donetasks = useMemo(() => {\n    return Object.entries(state).filter(([key, value]) => value.done);\n  }, [state]);\n\n  const notdonetasks = useMemo(() => {\n    return Object.entries(state).filter(([key, value]) => !value.done);\n  }, [state]);\n\n  const handleToggle = (value: number, key: string) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    console.log(state, key)\n\n    dispatch({\n      type: 'update',\n      taskid: key,\n      done: !state[key].done,\n      deadline: state[key].deadline,\n      text: state[key].text\n    });\n\n    setChecked(newChecked);\n    setTaskId(key);\n  }\n\n  const [open, setOpen] = React.useState(false);\n  const [openDeleteModal, setOpenDeleteModal] = React.useState(false);\n  const [input, setInput] = useState('');\n\n  function handleClickOpen(key: string) {\n    setTaskId(key);\n    setOpen(true);\n  }\n  function handleDeleteOpen(key: string) {\n    setTaskId(key);\n    setOpenDeleteModal(true);\n  }\n  function handleConfirm() {\n    console.log(taskId);\n    dispatch({\n      type: 'update',\n      taskid: taskId,\n      done: state[taskId].done,\n      deadline: state[taskId].deadline,\n      text: input\n    });\n    setOpen(false);\n  }\n  function handleClose() {\n    setOpen(false);\n  }\n\n  function handleDelete() {\n    console.log(taskId);\n    dispatch({\n      type: 'delete',\n      taskid: taskId\n    });\n    setOpenDeleteModal(false);\n  }\n  console.log(state)\n\n  function Item(key: string, value: Task, index: number) {\n    return (\n      <ListItem key={key} role={undefined} dense>\n        <ListItemIcon>\n          <Checkbox\n            edge=\"start\"\n            checked={value.done}\n            tabIndex={-1}\n            disableRipple\n            onClick={handleToggle(index, key)}\n          />\n        </ListItemIcon>\n        <ListItemText primary={`${value.text}`} />\n        <ListItemSecondaryAction>\n          <IconButton edge=\"end\" aria-label=\"Edit\" onClick={() => handleClickOpen(key)}>\n            <EditIcon />\n          </IconButton>\n          <IconButton edge=\"end\" aria-label=\"Edit\" onClick={() => handleDeleteOpen(key)}>\n            <DeleteIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </ListItem>\n    )\n  }\n\n  return (\n    <div>\n      <Button  variant=\"outlined\" color=\"inherit\" onClick={() => dispatch({\n        type: 'create',\n        deadline: new Date()\n      })}>新規ToDo作成</Button>\n\n      <form className={classes.root} autoComplete=\"off\">\n        <FormControl className={classes.formControl}>\n          <InputLabel htmlFor=\"age-simple\">表示方法</InputLabel>\n          <Select\n            value={showItems}\n            onChange={(e) => setShowItems(`${e.target.value}`)}\n          >\n            <MenuItem value={'all'}>全てのTodoを表示</MenuItem>\n            <MenuItem value={'done'}>完了したToDoを表示</MenuItem>\n            <MenuItem value={'notdone'}>未完了のToDoを表示</MenuItem>\n          </Select>\n        </FormControl>\n      </form>\n\n      <List className={classes.root}>\n        { showItems === 'all'\n          ? alltasks.map(([key, value], index) => (\n              Item(key, value, index)\n            ))\n          : showItems === 'done'\n            ? donetasks.map(([key, value], index) => (\n                Item(key, value, index)\n              ))\n            : notdonetasks.map(([key, value], index) => (\n                Item(key, value, index)\n              ))\n        }\n      </List>\n\n      <Dialog\n        fullWidth={true}\n        maxWidth={'sm'}\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"max-width-dialog-title\"\n      >\n        <DialogTitle id=\"max-width-dialog-title\">ToDo編集</DialogTitle>\n        <DialogContent>\n          <TextField\n            id=\"standard-full-width\"\n            label=\"ToDo名\"\n            placeholder=\"ToDo名\"\n            fullWidth\n            margin=\"normal\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={e => setInput(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            そのまま\n          </Button>\n          <Button onClick={handleConfirm} color=\"primary\">\n            完了\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog\n        fullWidth={true}\n        maxWidth={'sm'}\n        open={openDeleteModal}\n        onClose={handleClose}\n        aria-labelledby=\"max-width-dialog-title\"\n      >\n        <DialogTitle id=\"max-width-dialog-title\">ToDoを削除</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            本当にToDoを削除しますか？\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setOpenDeleteModal(false)} color=\"primary\">\n            そのまま\n          </Button>\n          <Button onClick={handleDelete} color=\"primary\">\n            消去する\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default TodayViewer;\n","import React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme, Theme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nimport { reducer } from './reducers/taskReducer';\nimport TodayViewer from './TodayViewer';\n\nimport { TaskContext } from './contexts/TaskContext';\nimport { TaskProps, initialState } from './models/taskModels';\n\nfunction App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const tasks = 'tasks' in localStorage ? JSON.parse(`${localStorage.getItem('tasks')}`) : {};\n  const [state, dispatch] = React.useReducer(reducer, tasks);\n  const taskProps: TaskProps = { state, dispatch }\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(state));\n  }, [state]);\n\n  function handleDrawerOpen() {\n    setOpen(true);\n  }\n\n  function handleDrawerClose() {\n    setOpen(false);\n  }\n\n  // const menuItems = ['today', 'week', 'month'];\n  const menuItems = ['today'];\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"Open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            ToDo App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {menuItems.map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        {/* <Divider />\n        <List>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List> */}\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <TaskContext.Provider value={taskProps}>\n          <TodayViewer></TodayViewer>\n        </TaskContext.Provider>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}